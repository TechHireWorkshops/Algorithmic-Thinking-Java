Count number of teams

There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if:  (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

Example 1:
Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1).

Example 2:
Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.

Example 3:
Input: rating = [1,2,3,4]
Output: 4

sample solution:

  int numTeams(int[] rating) {
    int res = 0;
    for (int i = 0; i < rating.length - 1; i++) {
      int[] less = new int[2];
      int[] great = new int[2];
      for (int j = 0; j < rating.length; j++) {
        if (rating[i] < rating[j]) {
          less[i > j ? 0 : 1]++;
        }
        if (rating[i] > rating[j]) {
          great[i > j ? 0 : 1]++;
        }
      }
      res += less[0] * great[1] + less[1] * great[0];
    }
    return res;
  } 


===============================================================

Group the people given the group size they belong to

There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.

You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.

Return a list of groups such that each person i is in a group of size groupSizes[i].

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.

sample solution:

  public List<List<Integer>> groupThePeople(int[] groupSizes) {
        List<List<Integer>> res = new ArrayList<>();
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();

        for (int i = 0; i < groupSizes.length; i++) {
            int size = groupSizes[i];
            if (!map.containsKey(size)) {
                map.put(size, new ArrayList<>());
            }

            ArrayList<Integer> group = map.get(size);
            group.add(i);

            if (group.size() == size) {
                res.add(new ArrayList<>(group));
                group.clear();
            }
        }

        return res;
    }